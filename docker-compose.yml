version: '3.8'

services:
  # Frontend Service
  frontend:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_URL=http://backend:5000/api
    depends_on:
      - backend
    networks:
      - prosync-network
    restart: unless-stopped

  # Backend Service
  backend:
    build:
      context: ./server
      dockerfile: Dockerfile
    ports:
      - "5000:5000"
    environment:
      - NODE_ENV=production
      - PORT=5000
      - CLIENT_URL=http://frontend:3000
      - JWT_SECRET=your-jwt-secret-key-here
      - JWT_EXPIRATION=1d
      - JWT_REFRESH_EXPIRATION=7d
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=prosync_hub
      - MONGO_URI=mongodb://mongo:27017/prosync_hub
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    depends_on:
      - postgres
      - mongo
      - redis
    networks:
      - prosync-network
    restart: unless-stopped

  # PostgreSQL Service
  postgres:
    image: postgres:14-alpine
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=prosync_hub
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - prosync-network
    restart: unless-stopped

  # MongoDB Service
  mongo:
    image: mongo:6-jammy
    ports:
      - "27017:27017"
    volumes:
      - mongo-data:/data/db
    networks:
      - prosync-network
    restart: unless-stopped

  # Redis Service
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - prosync-network
    restart: unless-stopped

networks:
  prosync-network:
    driver: bridge

volumes:
  postgres-data:
  mongo-data:
  redis-data:
