name: ProSyncHub CI/CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  FRONTEND_IMAGE_NAME: ${{ github.repository }}-frontend
  BACKEND_IMAGE_NAME: ${{ github.repository }}-backend

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        app: [frontend, backend]
        
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: ${{ matrix.app == 'frontend' && './package-lock.json' || './server/package-lock.json' }}
          
      - name: Install dependencies
        run: |
          if [ "${{ matrix.app }}" = "frontend" ]; then
            npm ci
          else
            cd server && npm ci
          fi
          
      - name: Run tests
        run: |
          if [ "${{ matrix.app }}" = "frontend" ]; then
            npm test
          else
            cd server && npm test
          fi
          
  build-and-push:
    name: Build and Push Docker images
    needs: test
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    
    strategy:
      matrix:
        app: [frontend, backend]
        
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ matrix.app == 'frontend' && env.FRONTEND_IMAGE_NAME || env.BACKEND_IMAGE_NAME }}
          tags: |
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix=,suffix=,format=short
            type=ref,event=branch
            type=ref,event=pr
            
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: ${{ matrix.app == 'frontend' && '.' || './server' }}
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          
  deploy-to-kubernetes:
    name: Deploy to Kubernetes
    needs: build-and-push
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up kubectl
        uses: azure/k8s-set-context@v3
        with:
          kubeconfig: ${{ secrets.KUBE_CONFIG }}
          
      - name: Deploy to Kubernetes
        run: |
          # Set image tag to the commit SHA
          export IMAGE_TAG=$(echo ${{ github.sha }} | cut -c1-7)
          export REGISTRY_URL=${{ env.REGISTRY }}/${{ github.repository_owner }}
          
          # Replace placeholders in Kubernetes manifests
          find ./kubernetes -type f -name "*.yaml" -exec sed -i "s|\${REGISTRY_URL}|$REGISTRY_URL|g" {} \;
          find ./kubernetes -type f -name "*.yaml" -exec sed -i "s|\${IMAGE_TAG}|$IMAGE_TAG|g" {} \;
          
          # Apply Kubernetes manifests
          kubectl apply -f ./kubernetes/namespace.yaml
          kubectl apply -f ./kubernetes/secrets.yaml
          kubectl apply -f ./kubernetes/persistent-volume-claims.yaml
          kubectl apply -f ./kubernetes/postgres.yaml
          kubectl apply -f ./kubernetes/mongo.yaml
          kubectl apply -f ./kubernetes/redis.yaml
          kubectl apply -f ./kubernetes/backend.yaml
          kubectl apply -f ./kubernetes/frontend.yaml
          
      - name: Verify deployment
        run: |
          kubectl -n prosync-hub rollout status deployment/backend
          kubectl -n prosync-hub rollout status deployment/frontend
