name: ProSyncHub CI/CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: prosync_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      
      mongodb:
        image: mongo:5
        ports:
          - 27017:27017
      
      redis:
        image: redis:6
        ports:
          - 6379:6379
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install frontend dependencies
      run: npm ci
    
    - name: Install backend dependencies
      run: |
        cd server
        npm ci
    
    - name: Run backend tests
      run: |
        cd server
        cp .env.example .env
        NODE_ENV=test npm test
      env:
        POSTGRES_HOST: localhost
        POSTGRES_PORT: 5432
        POSTGRES_DB: prosync_test
        POSTGRES_USER: postgres
        POSTGRES_PASSWORD: postgres
        MONGO_URI: mongodb://localhost:27017/prosync_test
        REDIS_HOST: localhost
        REDIS_PORT: 6379
    
    - name: Run frontend tests
      run: npm test
    
    - name: Lint frontend code
      run: npm run lint
    
    - name: Lint backend code
      run: |
        cd server
        npm run lint

  build:
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Build frontend
      run: npm run build
    
    - name: Upload frontend build artifact
      uses: actions/upload-artifact@v3
      with:
        name: frontend-build
        path: .next
        retention-days: 1

  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Download frontend build artifact
      uses: actions/download-artifact@v3
      with:
        name: frontend-build
        path: .next
    
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
    
    - name: Setup Docker Buildx
      uses: docker/setup-buildx-action@v2
    
    - name: Login to Azure Container Registry
      uses: docker/login-action@v2
      with:
        registry: ${{ secrets.ACR_LOGIN_SERVER }}
        username: ${{ secrets.ACR_USERNAME }}
        password: ${{ secrets.ACR_PASSWORD }}
    
    - name: Build and push frontend image
      uses: docker/build-push-action@v4
      with:
        context: .
        push: true
        tags: ${{ secrets.ACR_LOGIN_SERVER }}/prosync-frontend:latest
    
    - name: Build and push backend image
      uses: docker/build-push-action@v4
      with:
        context: ./server
        push: true
        tags: ${{ secrets.ACR_LOGIN_SERVER }}/prosync-backend:latest
    
    - name: Login to Azure
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
    
    - name: Deploy frontend to Azure Web App
      uses: azure/webapps-deploy@v2
      with:
        app-name: 'prosync-hub'
        images: '${{ secrets.ACR_LOGIN_SERVER }}/prosync-frontend:latest'
    
    - name: Deploy backend to Container Apps
      uses: azure/CLI@v1
      with:
        inlineScript: |
          az containerapp update \
            --name prosync-hub-api \
            --resource-group prosync-hub-rg \
            --image ${{ secrets.ACR_LOGIN_SERVER }}/prosync-backend:latest
